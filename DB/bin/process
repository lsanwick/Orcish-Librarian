#!/usr/bin/env ruby
# encoding: utf-8

require File.join(File.dirname(__FILE__), '../lib/bootstrap')
include Orcish

FileUtils.mkdir_p('data/build/sets')

cards_by_search_name = { }
cards_by_set_name = { }
sets_by_name = { }

# collect all the relevant data for post-processing
Dir.glob('data/source/*').each do |set_dir|
  if File.directory?(set_dir)
    set = File.open("#{set_dir}/meta.yml", 'r') { |io| MtgSet.load(io) }
    sets_by_name[set.name] = set
    cards_by_set_name[set.name] = [ ]    
    Dir.glob("#{set_dir}/*") do |card_file|
      if !/meta\.yml$/.match(card_file)
        card = File.open(card_file, 'r') { |io| MtgCard.load(io) }
        cards_by_search_name[card.search_name] = card
        cards_by_set_name[set.name] << card
      end
    end
  end
end

# write the index-by-name file
debug("Saving index-by-name file")
File.open('data/build/names.blob', 'w') { |io| io.print '|' + cards_by_search_name.keys.sort.join('|') + '|' }

# write the individual card files
debug("Saving individual card files")
cards_by_search_name.each do |key, card|
  FileUtils.mkdir_p("data/build/cards/#{key[0]}")
  File.open("data/build/cards/#{key[0]}/#{key}.json", 'w') do |io|
    io.print card.to_json
  end
end

# write the index-by-set files
debug("Saving index-by-set files")
sets_by_name.each do |set_name, set|
  cards_by_set_name[set_name].sort_by! { |card| card.search_name }  
  File.open("data/build/sets/#{sets_by_name[set_name].key}.json", 'w') do |io|
    hash = set.to_hash
    hash['cards'] = [ ]      
    cards_by_set_name[set_name].each do |card|
      hash['cards'] << card.name
    end
    io.puts hash.to_json
  end
end

# write the set index file
File.open('data/build/sets.json', 'w') do |io|
  sets = [ ]
  MtgSet.all_sets.each do |set|
    sets << set.to_hash
  end
  io.puts sets.to_json
end
